
// задача 1. Отредактированная
#include <iostream>
using namespace std;
int main(){
 int a, b, c, d;
 cin>>a;
 cin>>b;
 cin>>c;
 cin>>d;
 if ((a+1)(c-1)+1>(b+1)(d+1)-1 or (a+1)(c+1)-1<(b+1)(d-1)) cout<<"-1";
 else{
  if ((a+1)(c-1)+1>(b+1)(d-1)+1) cout<<(a+1)*(c-1)+1<<' ';
  else cout<<(b+1)*(d-1)+1<<' ';
  if ((a+1)(c+1)-1<(b+1)(d+1)-1) cout<<(a+1)*(c+1)-1;
  else cout<<(b+1)*(d+1)-1;
 }
}






from math import sqrt 
from math import pow 
from math import floor 
n = int(input()) 
m = int(input()) 
t = int(input()) 
w = (m - n + sqrt(pow((m - n), 2) + 4*(n * m - t))) / 2 
l = w - m + n 
print(floor((n - l) // 2))


#include <iostream> 
#include<vector> 
#include<algorithm> 
using namespace std; 
 
int main() 
{ 
    long long int n; 
    cin >> n; 
    long int max_sum=0; 
    vector<int>a; 
    int z=0; 
    for(int i=0;i<n;i++){ 
        int b; 
        cin >> b; 
        a.push_back(b); 
    } 
sort(a.begin(),a.end()); 
while(a.size()>0){ 
    if(a[0]*a.size()>max_sum){ 
        max_sum=a[0]*a.size(); 
        z=a.size(); 
    } 
    a.erase(a.begin()); 
} 
    cout<<z<< " " << max_sum/z << endl; 
}



def go_up(x, c): 
    global y 
    for i in range(c): 
        print(x + 2, y - 1) 
        print(x + 1, y + 1) 
        print(x, y - 1) 
        y -= 1 
        if y == b: 
            break 
 
def go_down(x, c): 
    global y 
    for i in range(c): 
        print(x + 2, y + 1) 
        print(x + 1, y - 1) 
        print(x, y + 1) 
        y += 1 
        if y == b: 
            break 
 
def go_left(y, c): 
    global x 
    for i in range(c): 
        print(x - 1, y + 2) 
        print(x + 1, y + 1) 
        print(x - 1, y) 
        x -= 1 
        if x == a: 
            break 
 
def go_right(y, c): 
    global x 
    for i in range(c): 
        print(x + 1, y + 2) 
        print(x - 1, y + 1) 
        print(x + 1, y) 
        x += 1 
        if x == a: 
            break 
 
a = int(input()) 
b = int(input()) 
x = 0 
y = 0 
if a < 0: 
    go_left(y, abs(a)) 
else: 
    go_right(y, a) 
x = a 
if b < 0: 
    go_up(x, abs(b)) 
else: 
    go_down(x, b)

